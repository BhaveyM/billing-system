{
	"info": {
		"_postman_id": "c3c7adf5-f6f7-4bf3-84e2-ae170709337c",
		"name": "billing system",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28838106"
	},
	"item": [
		{
			"name": "Create an account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.username).to.exist;",
							"  pm.expect(responseData.email).to.exist;",
							"  pm.expect(responseData.password).to.exist;",
							"  pm.expect(responseData.isAdmin).to.exist;",
							"  pm.expect(responseData._id).to.exist;",
							"  pm.expect(responseData.cart).to.exist;",
							"  pm.expect(responseData.__v).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"The username should be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email is not in a valid format\");",
							"});",
							"",
							"",
							"pm.test(\"The isAdmin field should be a boolean value\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.isAdmin).to.exist.and.to.be.a('boolean');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"testuser2\",\r\n    \"email\": \"test2@example.com\",\r\n    \"password\": \"secretpassword\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch all products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is an array with at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Each product object has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.forEach(function (product) {",
							"        pm.expect(product._id).to.exist.and.to.be.a('string');",
							"        pm.expect(product.name).to.exist.and.to.be.a('string');",
							"        pm.expect(product.price).to.exist.and.to.be.a('number');",
							"        pm.expect(product.type).to.exist.and.to.be.a('string');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Price is a non-negative number\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(product) {",
							"        pm.expect(product.price).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Type should be a string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function (product) {",
							"        pm.expect(product.type).to.be.a('string');",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch all services",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response body is an array\", function () {",
							"  pm.expect(pm.response.json()).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Each object in the response array has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"",
							"    responseData.forEach(function (object) {",
							"        pm.expect(object._id).to.exist.and.to.be.a('string');",
							"        pm.expect(object.name).to.exist.and.to.be.a('string');",
							"        pm.expect(object.price).to.exist.and.to.be.a('number');",
							"        pm.expect(object.type).to.exist.and.to.be.a('string');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate that the price field is a non-negative number\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(service) {",
							"        pm.expect(service.price).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Type field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  ",
							"  responseData.forEach(function(service) {",
							"    pm.expect(service.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type field should not be empty\");",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/services",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"services"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add product/service to cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.email).to.exist.and.to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
							"});",
							"",
							"",
							"pm.test(\"Verify cart array is present and contains expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.cart).to.exist.and.to.be.an('array');",
							"    pm.expect(responseData.cart).to.have.lengthOf(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"itemId\": \"64c6337f6d03f2b28c01e17a\",\r\n  \"itemType\": \"product\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/users/64c65ab02dbe5a782395e752/cart",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users",
						"64c65ab02dbe5a782395e752",
						"cart"
					]
				}
			},
			"response": []
		},
		{
			"name": "Remove product/service from cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.email).to.exist.and.to.match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/);",
							"});",
							"",
							"",
							"pm.test(\"Verify cart array is present and has expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.cart).to.exist;",
							"    pm.expect(responseData.cart).to.be.an('array');",
							"    pm.expect(responseData.cart).to.have.lengthOf(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/users/64c65ab02dbe5a782395e752/cart/64c633766d03f2b28c01e176/service",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users",
						"64c65ab02dbe5a782395e752",
						"cart",
						"64c633766d03f2b28c01e176",
						"service"
					]
				}
			},
			"response": []
		},
		{
			"name": "Calculate bill",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Total bill should be a number greater than or equal to zero\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.totalBill).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.totalBill).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Quantity should be a non-negative number\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.itemsWithTax).to.be.an('array');",
							"    responseData.itemsWithTax.forEach(function(item) {",
							"        pm.expect(item.quantity).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/users/64c65ab02dbe5a782395e752/bill",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users",
						"64c65ab02dbe5a782395e752",
						"bill"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user by username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'cart' array is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.cart).to.exist.and.to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'isAdmin' field is a boolean value\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.isAdmin).to.be.a('boolean');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/users/bhavey",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users",
						"bhavey"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"The user field should not be empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.user).to.exist.and.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Items array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.items).to.exist.and.to.be.an('array');",
							"    pm.expect(responseData.items.length).to.be.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Total bill is a non-negative number\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.totalBill).to.be.a('number');",
							"    pm.expect(responseData.totalBill).to.be.at.least(0, \"Total bill should be a non-negative number\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/users/64c65ab02dbe5a782395e752/confirm-order",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users",
						"64c65ab02dbe5a782395e752",
						"confirm-order"
					]
				}
			},
			"response": []
		},
		{
			"name": "Clear cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Username is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.email).to.exist.and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email is not in a valid format\");",
							"});",
							"",
							"",
							"pm.test(\"Password should be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.password).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/users/64c65ab02dbe5a782395e752/cart",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"users",
						"64c65ab02dbe5a782395e752",
						"cart"
					]
				}
			},
			"response": []
		},
		{
			"name": "Admin access for all orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test('Response is an array with at least one element', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"})",
							"",
							"pm.test('Each order contains a \\'user\\' object with expected fields', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function (order) {",
							"        pm.expect(order.user).to.exist.and.to.be.an('object');",
							"        pm.expect(order.user._id).to.exist.and.to.be.a('string');",
							"        pm.expect(order.user.username).to.exist.and.to.be.a('string');",
							"        pm.expect(order.user.email).to.exist.and.to.be.a('string');",
							"    });",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/admin/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"admin",
						"orders"
					]
				}
			},
			"response": []
		}
	]
}